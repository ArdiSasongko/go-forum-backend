// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: token.sql

package tokentable

import (
	"context"
	"time"
)

const createToken = `-- name: CreateToken :exec
INSERT INTO tokens (user_id, token_type, token, expired_at) VALUES ($1, $2, $3, $4)
`

type CreateTokenParams struct {
	UserID    int32
	TokenType TokenType
	Token     int32
	ExpiredAt time.Time
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.ExecContext(ctx, createToken,
		arg.UserID,
		arg.TokenType,
		arg.Token,
		arg.ExpiredAt,
	)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
Delete FROM tokens WHERE user_id = $1 AND token_type = $2
`

type DeleteTokenParams struct {
	UserID    int32
	TokenType TokenType
}

func (q *Queries) DeleteToken(ctx context.Context, arg DeleteTokenParams) error {
	_, err := q.db.ExecContext(ctx, deleteToken, arg.UserID, arg.TokenType)
	return err
}

const getToken = `-- name: GetToken :one
SELECT user_id, token_type, token, expired_at FROM tokens WHERE user_id = $1 AND token = $2
`

type GetTokenParams struct {
	UserID int32
	Token  int32
}

func (q *Queries) GetToken(ctx context.Context, arg GetTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, getToken, arg.UserID, arg.Token)
	var i Token
	err := row.Scan(
		&i.UserID,
		&i.TokenType,
		&i.Token,
		&i.ExpiredAt,
	)
	return i, err
}

const updateToken = `-- name: UpdateToken :exec
UPDATE tokens set token = $1, expired_at = $2 where user_id = $3
`

type UpdateTokenParams struct {
	Token     int32
	ExpiredAt time.Time
	UserID    int32
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateToken, arg.Token, arg.ExpiredAt, arg.UserID)
	return err
}
