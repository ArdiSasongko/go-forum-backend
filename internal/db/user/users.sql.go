// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package user

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, username, email, password, role, is_valid)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id
`

type CreateUserParams struct {
	Name     string
	Username string
	Email    string
	Password string
	Role     Roles
	IsValid  sql.NullBool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.IsValid,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, username, email, password, role, is_valid, created_at, updated_at FROM users WHERE id = $1 OR username = $2 OR email = $3
`

type GetUserParams struct {
	ID       int32
	Username string
	Email    string
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, arg.ID, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.IsValid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users set password = $1 where id = $2
`

type UpdatePasswordParams struct {
	Password string
	ID       int32
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.Password, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users set name = $1, username = $2 where id = $3
`

type UpdateUserParams struct {
	Name     string
	Username string
	ID       int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Name, arg.Username, arg.ID)
	return err
}

const validateUser = `-- name: ValidateUser :exec
UPDATE users set is_valid = true where id = $1
`

func (q *Queries) ValidateUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, validateUser, id)
	return err
}
