// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package user

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type Roles string

const (
	RolesAdmin Roles = "admin"
	RolesUser  Roles = "user"
)

func (e *Roles) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Roles(s)
	case string:
		*e = Roles(s)
	default:
		return fmt.Errorf("unsupported scan type for Roles: %T", src)
	}
	return nil
}

type NullRoles struct {
	Roles Roles
	Valid bool // Valid is true if Roles is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoles) Scan(value interface{}) error {
	if value == nil {
		ns.Roles, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Roles.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoles) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Roles), nil
}

type User struct {
	ID        int32
	Name      string
	Username  string
	Email     string
	Password  string
	Role      Roles
	IsValid   sql.NullBool
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

type UserSession struct {
	UserID              int32
	Token               string
	TokenExpired        time.Time
	RefreshToken        string
	RefreshTokenExpired time.Time
}
