// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: usersession.sql

package usersession

import (
	"context"
	"time"
)

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM user_sessions WHERE user_id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteToken, userID)
	return err
}

const getToken = `-- name: GetToken :one
SELECT user_id, token, token_expired, refresh_token, refresh_token_expired FROM user_sessions WHERE user_id = $1
`

func (q *Queries) GetToken(ctx context.Context, userID int32) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, getToken, userID)
	var i UserSession
	err := row.Scan(
		&i.UserID,
		&i.Token,
		&i.TokenExpired,
		&i.RefreshToken,
		&i.RefreshTokenExpired,
	)
	return i, err
}

const insertToken = `-- name: InsertToken :one
INSERT INTO user_sessions (user_id, token, token_expired, refresh_token, refresh_token_expired) VALUES ($1, $2, $3, $4, $5) RETURNING token, refresh_token
`

type InsertTokenParams struct {
	UserID              int32
	Token               string
	TokenExpired        time.Time
	RefreshToken        string
	RefreshTokenExpired time.Time
}

type InsertTokenRow struct {
	Token        string
	RefreshToken string
}

func (q *Queries) InsertToken(ctx context.Context, arg InsertTokenParams) (InsertTokenRow, error) {
	row := q.db.QueryRowContext(ctx, insertToken,
		arg.UserID,
		arg.Token,
		arg.TokenExpired,
		arg.RefreshToken,
		arg.RefreshTokenExpired,
	)
	var i InsertTokenRow
	err := row.Scan(&i.Token, &i.RefreshToken)
	return i, err
}

const updateToken = `-- name: UpdateToken :exec
UPDATE user_sessions set token = $1, token_expired = $2, refresh_token = $3, refresh_token_expired = $4 where user_id = $5
`

type UpdateTokenParams struct {
	Token               string
	TokenExpired        time.Time
	RefreshToken        string
	RefreshTokenExpired time.Time
	UserID              int32
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateToken,
		arg.Token,
		arg.TokenExpired,
		arg.RefreshToken,
		arg.RefreshTokenExpired,
		arg.UserID,
	)
	return err
}
