// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: useractivites.sql

package useractivities

import (
	"context"
	"database/sql"
)

const getContentDislikes = `-- name: GetContentDislikes :one
SELECT COUNT(id) FROM user_activities WHERE content_id = $1 AND isDisliked = true
`

func (q *Queries) GetContentDislikes(ctx context.Context, contentID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getContentDislikes, contentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getContentLikes = `-- name: GetContentLikes :one
SELECT COUNT(id) FROM user_activities WHERE content_id = $1 AND isLiked = true
`

func (q *Queries) GetContentLikes(ctx context.Context, contentID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getContentLikes, contentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const likeOrDislikeContent = `-- name: LikeOrDislikeContent :exec
INSERT INTO user_activities (user_id, content_id, isLiked, isDisliked, created_by, updated_by)
VALUES ($1, $2, $3, $4, $5, $6) 
ON CONFLICT (user_id, content_id) 
DO UPDATE SET
    isLiked = EXCLUDED.isLiked,         
    isDisliked = EXCLUDED.isDisliked,  
    updated_at = current_timestamp,
    updated_by = EXCLUDED.updated_by
WHERE 
    user_activities.isLiked IS DISTINCT FROM EXCLUDED.isLiked 
    OR user_activities.isDisliked IS DISTINCT FROM EXCLUDED.isDisliked
`

type LikeOrDislikeContentParams struct {
	UserID     int32
	ContentID  int32
	Isliked    sql.NullBool
	Isdisliked sql.NullBool
	CreatedBy  string
	UpdatedBy  string
}

func (q *Queries) LikeOrDislikeContent(ctx context.Context, arg LikeOrDislikeContentParams) error {
	_, err := q.db.ExecContext(ctx, likeOrDislikeContent,
		arg.UserID,
		arg.ContentID,
		arg.Isliked,
		arg.Isdisliked,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	return err
}
