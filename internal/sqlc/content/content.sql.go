// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: content.sql

package content

import (
	"context"
	"time"
)

const deleteContent = `-- name: DeleteContent :exec
DELETE FROM contents WHERE id = $1
`

func (q *Queries) DeleteContent(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteContent, id)
	return err
}

const deleteImageContent = `-- name: DeleteImageContent :exec
DELETE FROM images_content WHERE content_id = $1 AND image_url = $2
`

type DeleteImageContentParams struct {
	ContentID int32
	ImageUrl  string
}

func (q *Queries) DeleteImageContent(ctx context.Context, arg DeleteImageContentParams) error {
	_, err := q.db.ExecContext(ctx, deleteImageContent, arg.ContentID, arg.ImageUrl)
	return err
}

const deleteImagesContent = `-- name: DeleteImagesContent :exec
DELETE FROM images_content WHERE content_id = $1
`

func (q *Queries) DeleteImagesContent(ctx context.Context, contentID int32) error {
	_, err := q.db.ExecContext(ctx, deleteImagesContent, contentID)
	return err
}

const getContent = `-- name: GetContent :one
SELECT 
    c.id, 
    c.content_title,
    c.content_body,
    STRING_AGG(i.image_url, ',') AS image_urls,
    c.content_hastags, 
    c.created_at, 
    c.updated_at, 
    c.created_by 
FROM contents c 
LEFT JOIN images_content i 
ON c.id = i.content_id 
WHERE c.id = $1
GROUP BY 
    c.id, 
    c.content_title,
    c.content_body,
    c.content_hastags, 
    c.created_at, 
    c.updated_at, 
    c.created_by
`

type GetContentRow struct {
	ID             int32
	ContentTitle   string
	ContentBody    string
	ImageUrls      []byte
	ContentHastags string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	CreatedBy      string
}

func (q *Queries) GetContent(ctx context.Context, id int32) (GetContentRow, error) {
	row := q.db.QueryRowContext(ctx, getContent, id)
	var i GetContentRow
	err := row.Scan(
		&i.ID,
		&i.ContentTitle,
		&i.ContentBody,
		&i.ImageUrls,
		&i.ContentHastags,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getContents = `-- name: GetContents :many
SELECT 
    c.id, 
    c.content_title, 
    c.content_body,
    c.content_hastags, 
    STRING_AGG(i.image_url, ',') AS image_urls
FROM contents c 
LEFT JOIN images_content i 
ON c.id = i.content_id 
GROUP BY c.id
ORDER BY c.created_at 
DESC LIMIT $1 OFFSET $2
`

type GetContentsParams struct {
	Limit  int32
	Offset int32
}

type GetContentsRow struct {
	ID             int32
	ContentTitle   string
	ContentBody    string
	ContentHastags string
	ImageUrls      []byte
}

func (q *Queries) GetContents(ctx context.Context, arg GetContentsParams) ([]GetContentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getContents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetContentsRow
	for rows.Next() {
		var i GetContentsRow
		if err := rows.Scan(
			&i.ID,
			&i.ContentTitle,
			&i.ContentBody,
			&i.ContentHastags,
			&i.ImageUrls,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImagesContent = `-- name: GetImagesContent :many
SELECT image_url FROM images_content WHERE content_id = $1
`

func (q *Queries) GetImagesContent(ctx context.Context, contentID int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getImagesContent, contentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var image_url string
		if err := rows.Scan(&image_url); err != nil {
			return nil, err
		}
		items = append(items, image_url)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertContent = `-- name: InsertContent :one
INSERT INTO 
contents (user_id, content_title, content_body, content_hastags, created_by, updated_by) 
VALUES 
($1, $2, $3, $4, $5, $6) RETURNING id
`

type InsertContentParams struct {
	UserID         int32
	ContentTitle   string
	ContentBody    string
	ContentHastags string
	CreatedBy      string
	UpdatedBy      string
}

func (q *Queries) InsertContent(ctx context.Context, arg InsertContentParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertContent,
		arg.UserID,
		arg.ContentTitle,
		arg.ContentBody,
		arg.ContentHastags,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertImageContent = `-- name: InsertImageContent :exec
INSERT INTO images_content (content_id, image_url) VALUES ($1, $2)
`

type InsertImageContentParams struct {
	ContentID int32
	ImageUrl  string
}

func (q *Queries) InsertImageContent(ctx context.Context, arg InsertImageContentParams) error {
	_, err := q.db.ExecContext(ctx, insertImageContent, arg.ContentID, arg.ImageUrl)
	return err
}

const updateContent = `-- name: UpdateContent :exec
UPDATE contents SET content_title = $2, content_body = $3, content_hastags = $4, updated_by = $5, updated_at = $6 WHERE id = $1 AND user_id = $7
`

type UpdateContentParams struct {
	ID             int32
	ContentTitle   string
	ContentBody    string
	ContentHastags string
	UpdatedBy      string
	UpdatedAt      time.Time
	UserID         int32
}

func (q *Queries) UpdateContent(ctx context.Context, arg UpdateContentParams) error {
	_, err := q.db.ExecContext(ctx, updateContent,
		arg.ID,
		arg.ContentTitle,
		arg.ContentBody,
		arg.ContentHastags,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.UserID,
	)
	return err
}

const updateImageContent = `-- name: UpdateImageContent :exec
UPDATE images_content SET image_url = $2 WHERE content_id = $1
`

type UpdateImageContentParams struct {
	ContentID int32
	ImageUrl  string
}

func (q *Queries) UpdateImageContent(ctx context.Context, arg UpdateImageContentParams) error {
	_, err := q.db.ExecContext(ctx, updateImageContent, arg.ContentID, arg.ImageUrl)
	return err
}
